/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userInterface.customer.customers;

import business.EcoSystem;
import business.customer.Customer;
import business.customer.CustomerDirectory;
import business.enterprise.Enterprise;
import business.network.Network;
import business.organization.Organization;
import business.workQueue.CollectionWorkRequest;
import business.workQueue.WorkQueue;
import business.workQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Akass
 */
public class CustomerWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerWorkAreaJPanel
     */
    
    private CustomerDirectory customerDirectory;
    private EcoSystem ecoSystem;
private Customer customer;
    
    public CustomerWorkAreaJPanel(JPanel userProcessContainer, Customer customer, EcoSystem ecoSystem) {
    this.ecoSystem = ecoSystem;
    this.customer = customer;

    setLayout(new CardLayout());
    add(new JLabel("Welcome, " + customer.getUsername()));

    initComponents();
    populateTable();
    
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        btnRegister = new javax.swing.JButton();
        containerPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        RestaurantJtable = new javax.swing.JTable();

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel1.setBackground(new java.awt.Color(255, 153, 153));

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Welcome to Food Store!");

        btnRegister.setText("Checkout");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(209, 209, 209)
                .addComponent(jLabel1)
                .addGap(49, 49, 49)
                .addComponent(btnRegister)
                .addContainerGap(131, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnRegister)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jSplitPane1.setTopComponent(jPanel1);

        containerPanel.setLayout(new java.awt.CardLayout());

        RestaurantJtable.setBackground(new java.awt.Color(255, 153, 153));
        RestaurantJtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Request", "Restaurant", "Quantity", "FoodType"
            }
        ));
        jScrollPane1.setViewportView(RestaurantJtable);

        containerPanel.add(jScrollPane1, "card2");

        jSplitPane1.setRightComponent(containerPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = RestaurantJtable.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a request to checkout.");
        return;
    }

    // Fetch the selected object, which is now the CollectionWorkRequest
    Object selectedObject = RestaurantJtable.getValueAt(selectedRow, 0);

    // Print the class of the selected object for debugging
    System.out.println("Selected object class: " + selectedObject.getClass().getName());

    // Check if the object is of type CollectionWorkRequest
    if (selectedObject instanceof CollectionWorkRequest) {
        CollectionWorkRequest selectedRequest = (CollectionWorkRequest) selectedObject;

        // Assuming 'customer' is the currently selected customer
        Customer selectedCustomer = customer;

        // Set the deliverTo field in the request to the selected Customer
        selectedRequest.setDeliverToCustomer(selectedCustomer);

        // Navigate to the PlaceOrderJPanel, passing the selected request
        PlaceOrderJPanel placeOrderPanel = new PlaceOrderJPanel(selectedRequest);
        CardLayout layout = (CardLayout) containerPanel.getLayout();
        containerPanel.add("PlaceOrderJPanel", placeOrderPanel);
        layout.next(containerPanel);

        // Optionally, show a confirmation message
        JOptionPane.showMessageDialog(this, "Order registered and moved to PlaceOrder.");
    } else {
        JOptionPane.showMessageDialog(this, "Selected item is not a valid CollectionWorkRequest.");
    }

    }//GEN-LAST:event_btnRegisterActionPerformed

    
    private List<CollectionWorkRequest> getRelevantRequests() {
    List<CollectionWorkRequest> requests = new ArrayList<>();

    System.out.println("Fetching relevant requests...");
    
    // Loop through all networks
    for (Network network : ecoSystem.getNetworkList()) {
        System.out.println("Network: " + network.getName());

        // Loop through enterprises within the network
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            System.out.println("Enterprise: " + enterprise.getName());

            // Loop through organizations within the enterprise
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                System.out.println("Checking WorkQueue for Organization: " + organization.getName());

                WorkQueue workQueue = organization.getWorkQueue();

                if (workQueue == null) {
                    System.out.println("WorkQueue is null for organization: " + organization.getName());
                    continue;
                }

                List<WorkRequest> workRequests = workQueue.getWorkRequestList();

                if (workRequests.isEmpty()) {
                    System.out.println("No WorkRequests found in WorkQueue for organization: " + organization.getName());
                    continue;
                }

                // Loop through WorkRequests in the WorkQueue
                for (WorkRequest workRequest : workRequests) {
                    if (workRequest == null) {
                        System.out.println("Null WorkRequest found in WorkQueue of organization: " + organization.getName());
                        continue;
                    }

                    System.out.println("WorkRequest type: " + workRequest.getClass().getSimpleName());
                    System.out.println("WorkRequest details: " + workRequest);

                    if (workRequest instanceof CollectionWorkRequest) {
                        requests.add((CollectionWorkRequest) workRequest);
                        System.out.println("Added CollectionWorkRequest to relevant requests.");
                    }
                }
            }
        }
    }

    System.out.println("Total Relevant Requests: " + requests.size());
    return requests;
}

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) RestaurantJtable.getModel();
    model.setRowCount(0); // Clear existing rows

    for (CollectionWorkRequest cwr : getRelevantRequests()) {
    System.out.println("Adding to table: " + cwr.toString());
    Object[] row = new Object[4];
    row[0] = cwr; // Ensure this is non-null
    row[1] = cwr.getRaisedByRestaurant();
    row[2] = cwr.getTotalQuantity();
    row[3] = cwr.getRequestItems().get(0);
    model.addRow(row);
}
    }
    
    

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable RestaurantJtable;
    private javax.swing.JButton btnRegister;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    // End of variables declaration//GEN-END:variables
}
