/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userInterface.customer.customers;

import business.customer.Customer;
import business.workQueue.CollectionWorkRequest;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Akass
 */
public class PlaceOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PlaceOrderJPanel
     */
    
    private CollectionWorkRequest selectedRequest;
    private static final double ITEM_COST = 5.0; // Default cost per item
    private static final double DISCOUNT = 0.4; // 40% discount
    public PlaceOrderJPanel(CollectionWorkRequest selectedRequest) {
        this.selectedRequest = selectedRequest;
        initComponents();
        populateRequestDetails();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        placeorderJtable = new javax.swing.JTable();
        btnapplyDiscount = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        pricingTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        modifySpinner = new javax.swing.JSpinner();
        ModifyQuantity = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 153, 153));

        placeorderJtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Customer Name", "Restaurant Request", "Quantity", "Food type"
            }
        ));
        jScrollPane1.setViewportView(placeorderJtable);

        btnapplyDiscount.setText("Apply Discount");
        btnapplyDiscount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnapplyDiscountActionPerformed(evt);
            }
        });

        pricingTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Customer Name", "Food type", "Quantity", "Final Price"
            }
        ));
        jScrollPane2.setViewportView(pricingTable);

        jButton1.setText("Place Order");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ModifyQuantity.setText("ModifyQuantity");
        ModifyQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModifyQuantityActionPerformed(evt);
            }
        });

        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ModifyQuantity)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(modifySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(416, 416, 416))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 536, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(598, 598, 598)
                                    .addComponent(btnapplyDiscount))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(415, 415, 415)
                                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnSearch)))
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnSearch))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ModifyQuantity))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnapplyDiscount)
                .addGap(59, 59, 59)
                .addComponent(jButton1)
                .addContainerGap(101, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ModifyQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModifyQuantityActionPerformed
        // TODO add your handling code here:
       double requestedQuantity = selectedRequest.getTotalQuantity(); // Original quantity
    int modifiedQuantity = (int) modifySpinner.getValue(); // Value from the spinner

    // Validate the modified quantity
    if (modifiedQuantity <= 0) {
        JOptionPane.showMessageDialog(this, "Quantity must be greater than 0.");
        return; // Exit the method without updating
    }

    if (modifiedQuantity <= requestedQuantity) {
        updatePricingTable(modifiedQuantity, false); // Update the table
        double finalPrice = ITEM_COST * modifiedQuantity;
        updateWorkRequest(modifiedQuantity, finalPrice); // Update the work request
    } else {
        JOptionPane.showMessageDialog(this, "Modified quantity cannot be greater than the requested quantity.");
    }          
    }//GEN-LAST:event_ModifyQuantityActionPerformed

    private void updateWorkRequest(int modifiedQuantity, double finalPrice) {
    // Update the selected work request with the modified quantity and price
    selectedRequest.setTotalQuantity(modifiedQuantity); 
    Customer customer = selectedRequest.getDeliveredToCustomer(); // Get the Customer object
if (customer != null) {
    String username = customer.getUsername(); // Get the username from the Customer
    // Assuming you have logic to retrieve or modify the Customer object
    selectedRequest.setDeliverToCustomer(customer); // Set the Customer object back
} else {
    JOptionPane.showMessageDialog(this, "Customer not found in the selected request.");
}
    // Optionally add a status or message for better tracking
    selectedRequest.setStatus("Order Updated for Customer");
    JOptionPane.showMessageDialog(this, "Work request updated successfully.");
}
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = pricingTable.getSelectedRow();
    if (selectedRow >= 0) {
        // Get the final price from the pricing table (4th column)
        double finalPrice = (double) pricingTable.getValueAt(selectedRow, 3);

        // Display the delivery time and final price in a message dialog
        JOptionPane.showMessageDialog(this, "Your order has been successfully placed. Final price: $" + finalPrice);
    } else {
        JOptionPane.showMessageDialog(this, "Please select a record from the pricing table.");
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnapplyDiscountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnapplyDiscountActionPerformed
        // TODO add your handling code here:
        int selectedRow = pricingTable.getSelectedRow();
    if (selectedRow >= 0) {
        // Get the original price from the table (before discount)
        double originalPrice = (double) pricingTable.getValueAt(selectedRow, 3);

        // Apply the discount
        double discountedPrice = originalPrice * (1 - DISCOUNT);

        // Show a pop-up indicating the discount applied
        JOptionPane.showMessageDialog(this, "40% Discount Applied! New Price: $" + discountedPrice);

        // Update the pricing table with the discounted price
        updatePricingTable((int) pricingTable.getValueAt(selectedRow, 2), true); // Pass 'true' to apply discount
    } else {
        JOptionPane.showMessageDialog(this, "Please select a record from the pricing table.");
    }
        
    }//GEN-LAST:event_btnapplyDiscountActionPerformed

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        
        String searchText = txtSearch.getText().trim();

    if (searchText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a search term.");
        return;
    }

    DefaultTableModel model = (DefaultTableModel) placeorderJtable.getModel();
    model.setRowCount(0); // Clear the table before displaying search results

    // Assuming the CollectionWorkRequest has methods to get relevant details
    if (selectedRequest != null && selectedRequest.getDeliveredToCustomer().getUsername().contains(searchText)) {
        Object[] row = new Object[4];
        row[0] = selectedRequest.getDeliveredToCustomer().getUsername();
        row[1] = selectedRequest.getRaisedByRestaurant();
        row[2] = selectedRequest.getTotalQuantity();
        row[3] = selectedRequest.getRequestItems().get(0);
        model.addRow(row);
    } else {
        JOptionPane.showMessageDialog(this, "No matching results found.");
    }

        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    private void updatePricingTable(int quantity,boolean applyDiscount) {
        // Calculate the price
     double originalPrice = ITEM_COST * quantity;
    double priceToDisplay = originalPrice;

    if (applyDiscount) {
        // If discount is to be applied, calculate the discounted price
        priceToDisplay = originalPrice * (1 - DISCOUNT);
    }

    // Populate the pricing table with the appropriate price
    DefaultTableModel model = (DefaultTableModel) pricingTable.getModel();
    model.setRowCount(0); // Clear existing rows

    Object[] row = new Object[4];
    row[0] = selectedRequest.getDeliveredToCustomer().getUsername(); // Customer name
    row[1] = selectedRequest.getRaisedByRestaurant(); // Food type or restaurant
    row[2] = quantity; // Quantity
    row[3] = priceToDisplay; // Final price (with or without discount)
    model.addRow(row);
    }

    
    private void populateRequestDetails() {
        DefaultTableModel model = (DefaultTableModel) placeorderJtable.getModel();
        model.setRowCount(0); // Clear existing rows

        // Add selectedRequest to the table
        if (selectedRequest != null) {
            Object[] row = new Object[4];
            row[0] = selectedRequest.getDeliveredToCustomer().getUsername(); // Assuming `getId()` provides a unique ID
            row[1] = selectedRequest.getRaisedByRestaurant(); // Restaurant details
            row[2] = selectedRequest.getTotalQuantity(); // Total quantity requested
            row[3] = selectedRequest.getRequestItems().get(0);// Delivery cost
            model.addRow(row);
        }
            
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ModifyQuantity;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnapplyDiscount;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner modifySpinner;
    private javax.swing.JTable placeorderJtable;
    private javax.swing.JTable pricingTable;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
